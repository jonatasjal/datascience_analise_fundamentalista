# -*- coding: utf-8 -*-
"""[Jonatas-Liberato] treinando_analise_fundamentalista.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VgHUX4-7kgPrApiLXVYPqfGkhWLWw9KI

# **ANÁLISE FUNDAMENTALISTA**

# Pacotes e Bibliotecas
"""

!pip install yfinance
!pip install fundamentus
!pip install investpy

# Bibliotecas
import fundamentus
import yfinance as yf
import investpy as inv
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime
import plotly.graph_objects as go
from plotly.subplots import make_subplots

"""# Análise Exploratória

**Usando o Fundamentus**
"""

# Mais enxuto
dataset = fundamentus.get_resultado()
dataset

# Mais completo
dataset_raw = fundamentus.get_resultado_raw()
dataset_raw

"""**Verificando todas as variáveis**"""

dataset.info()

dataset_raw.info()

dataset.shape

dataset_raw.shape

dataset_raw.info()

dataset_raw['P/L'].describe()

"""**Registros**"""

dataset.shape

"""**Listando alguns papéis**"""

setor = fundamentus.list_papel_setor(8)
setor

"""**Listando por determinado setor**"""

dataset_raw.query('index in @setor')

"""# Indicadores de Lucro / Operacional

1. Ebit (margem)
2. Margem líquida
3. ROIC
4. ROE
5. Dividend Yeld
6. CAGR (Crescimento de receita dos últimos 5 anos)
"""

ind_lucro = dataset.query('index in @setor').loc[:, ['mrgebit', 'mrgliq', 'roic', 'roe', 'dy', 'c5y' ]]
ind_lucro

"""# Indicadores de Preço / Valor

1. P/L
2. P/VPA = Preço da Ação (PL/N ações)
3. EV / EBIT = EV - MarketCap + (dívida bruta - caixa)
4. EV / EBTIDA
"""

ind_valor = dataset.query('index in @setor').loc[:, ['pl', 'pvp', 'evebit', 'evebitda']]
ind_valor

"""# Indicador de Liquidez

Liquidez Corrente = Ativo Circulante / Passivo Circulante
"""

ind_liquidez = dataset_raw.query('index in @setor').loc[:, ['Liq. Corr.']]
ind_liquidez

"""# Endividamento

Dívida Bruta / Patrimônio Líquido
"""

endividamento = dataset.query('index in @setor').loc[:, ['divbpatr']]
endividamento

"""# Informações Sobre uma Empresa"""

ativo = yf.Ticker('PETR4.SA')

ativo.earnings

receitas = ativo.earnings
receitas = receitas/1000
receitas

"""# Campos Relevantes para Determinado Ativo

- Net Income = Lucro Líquido
- Income Before Taax = Lucro antes do IR
- Selling General Administrative (SG&A) Depesas Operacionais
- Gross Profit = Lucro Bruto
- Income Tax Expense = Lucro antes do IR
- Total Revenue = Total de receitas
- Cost of Revenue = Custo de Receita
"""

dre = ativo.get_financials(freq = 'quarterly')
dre

# criando um Dataframe com colunas específicas e menor número de casas decimais
dre = pd.DataFrame(dre)
dre = dre/1000
dre = dre[dre.columns[::-1]]
dre

"""# Balanço"""

balanco = ativo.get_balance_sheet(freq = 'yearly')
balanco

"""- Total Assets = Total do Ativo 
- Total Stockholder Equity = Patrimônio Líquido
"""

balanco = pd.DataFrame(balanco)
balanco = balanco/1000
balanco = balanco[balanco.columns[::-1]]
balanco

"""# Plotando"""

# fundamentos
fig = make_subplots(rows=8,
                    cols=2,
                    row_heights=[5,5,5,5,5,5,5,5],
                    column_widths=[3,3],
                    subplot_titles=('Receita Bruta Y', 'Lucro Líquido Y', 'Dívida CP Tri', 'Dívida LP Tri',
                                    'Margem EBITDA', 'Margem Líquida', 'ROIC', 'ROE',
                                    'Div Bruta/PL', 'CAGR 5Y', 'Preço/Lucro', 'P/VP',
                                    'EV/EBIT', 'EV/EBITDA', 'Liquidez Corrente', 'Div Yeld'),
                    shared_xaxes=False)

# criando os eixos do gráfico para cara fundamento
fig.add_trace(go.Bar(name='Receita_bruta', x=receitas.index, y=receitas['Revenue']), row=1, col=1)
fig.add_trace(go.Bar(name='Receita_liquida', x=receitas.index, y=receitas['Earnings']), row=1, col=2)
fig.add_trace(go.Bar(name='Divida_CP', x=balanco.columns, y=balanco.loc['Short Long Term Debt']), row=2, col=1)
fig.add_trace(go.Bar(name='Divida_CP', x=balanco.columns, y=balanco.loc['Long Term Debt']), row=2, col=2)
fig.add_trace(go.Bar(name='Margem_Ebtida', x=ind_lucro.index, y=ind_lucro['mrgebit']), row=3, col=1)
fig.add_trace(go.Bar(name='Margem_Liquida', x=ind_lucro.index, y=ind_lucro['mrgliq']), row=3, col=2)
fig.add_trace(go.Bar(name='ROIC', x=ind_lucro.index, y=ind_lucro['roic']), row=4, col=1)
fig.add_trace(go.Bar(name='ROE', x=ind_lucro.index, y=ind_lucro['roe']), row=4, col=2)
fig.add_trace(go.Bar(name='divbpatr', x=endividamento.index, y=endividamento['divbpatr']), row=5, col=1)
fig.add_trace(go.Bar(name='c5y', x=ind_lucro.index, y=ind_lucro['c5y']), row=5, col=2)
fig.add_trace(go.Bar(name='pl', x=ind_valor.index, y=ind_valor['pl']), row=6, col=1)
fig.add_trace(go.Bar(name='pvp', x=ind_valor.index, y=ind_valor['pvp']), row=6, col=2)
fig.add_trace(go.Bar(name='evebit', x=ind_valor.index, y=ind_valor['evebit']), row=7, col=1)
fig.add_trace(go.Bar(name='evebitda', x=ind_valor.index, y=ind_valor['evebitda']), row=7, col=2)
fig.add_trace(go.Bar(name='ind_liquidez', x=ind_liquidez.index, y=ind_liquidez['Liq. Corr.']), row=8, col=1)
fig.add_trace(go.Bar(name='dy', x=ind_lucro.index, y=ind_lucro['dy']), row=8, col=2)

# layout
fig.update_layout(title_text='<b>Avaliação Fundamentalista AALR3.SA<b>', 
                  template='plotly_dark',
                  showlegend=False, 
                  height=1800, 
                  width=900) 
fig.show()

"""# Cálculo do Giro do Ativo e Margem Líquida através do YF

Refere-se ao indicador contábil que relaciona os ativos de uma companhia com a sua receita líquida e indica o quão eficiente uma empresa é para gerar ganhos com seus ativos, junto com bens e investimentos.

--

**Giro do ativo: Total Revenue/Total Assets (todos na frequência anual)**
"""

dre_ativo = ativo.get_financials(freq='yearly')
dre_ativo = pd.DataFrame(dre_ativo)
dre_ativo = dre_ativo/1000
dre_ativo = dre_ativo[dre_ativo.columns[::-1]]
dre_ativo

giro_do_ativo = pd.DataFrame()
giro_do_ativo['Giro do Ativo'] = (dre_ativo.loc['Total Revenue'] / balanco.loc['Total Assets']) * 1000
giro_do_ativo

"""# Margem Líquida Anual

Outro índice muito utilizado para a análise de determinada empresa, refere-se ao resultado da divisão do lucro líquido pela receita líquida após todos os impostos e tributos serem devidamente deduzidos.

-- 

**Margem líquida = lucro líquido após impostos/ Receita Total x 100**
"""

margem_liquida = pd.DataFrame()
margem_liquida['Margem_Liquida'] = (dre_ativo.loc['Net Income'] /dre_ativo.loc['Total Revenue']) * 100 
margem_liquida

"""# Utilizando Investpy"""

ticker = 'PETR4'

"""**Coletando o DRE da Petrobrás**"""

petro_dre = inv.get_stock_financial_summary(stock = ticker,
                                               country = "Brazil",
                                               summary_type = "income_statement",
                                               period = "annual")
petro_dre

"""**Coletando o Balanço Patrimonial da Petrobrás**"""

petro_balanco = inv.get_stock_financial_summary(stock = ticker,
                                               country = "Brazil",
                                               summary_type = "balance_sheet",
                                               period = "annual")
petro_balanco

"""**Coletando o Fluxo de Caixa da Petrobrás**"""

petro_fluxo = inv.get_stock_financial_summary(stock = ticker,
                                               country = "Brazil",
                                               summary_type = "cash_flow_statement",
                                               period = "annual")
petro_fluxo

"""**Obtendo o ROE (Return oon Equity) desde 2018**"""

petro_roe = petro_dre['Net Income'] / petro_balanco['Total Equity'] * 100
petro_roe

"""**Obtendo o ROA (Return on Asset)**"""

petro_roa = petro_dre['Net Income'] / petro_balanco['Total Assets'] * 100
petro_roa

"""**LPA (Lucro por Ação)**"""

petro_lpa = petro_dre['Net Income'] * 1000000 / petro["Shares Outstanding"].values 
petro_lpa